{"ast":null,"code":"var _jsxFileName = \"/Users/abuzarrahim/Downloads/test_full_stack_developer-ERN/frontend/src/components/Refecto/index.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Refecto({\n  data\n}) {\n  _s();\n  const recur = data => {\n    for (let key in data) {\n      if (typeof data[key] === \"object\") {\n        // If the value is an object, recursively parse it\n        parseObject(data[key]);\n      } else if (Array.isArray(obj[key])) {\n        // If the value is an array, iterate over its elements\n        console.log(`${key}:`);\n        data[key].forEach((item, index) => {\n          console.log(`  ${index}: ${item}`);\n        });\n      } else {\n        // Otherwise, it's a primitive value, so print it\n        console.log(`${key}: ${obj[key]}`);\n      }\n    }\n  };\n  useEffect(() => {\n    recur(data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-block\",\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: \"Hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Refecto, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Refecto;\nvar _c;\n$RefreshReg$(_c, \"Refecto\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Refecto","data","_s","recur","key","parseObject","Array","isArray","obj","console","log","forEach","item","index","useEffect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/abuzarrahim/Downloads/test_full_stack_developer-ERN/frontend/src/components/Refecto/index.js"],"sourcesContent":["import React from \"react\";\r\n\r\nexport default function Refecto({ data }) {\r\n  const recur = (data) => {\r\n    for (let key in data) {\r\n      if (typeof data[key] === \"object\") {\r\n        // If the value is an object, recursively parse it\r\n        parseObject(data[key]);\r\n      } else if (Array.isArray(obj[key])) {\r\n        // If the value is an array, iterate over its elements\r\n        console.log(`${key}:`);\r\n        data[key].forEach((item, index) => {\r\n          console.log(`  ${index}: ${item}`);\r\n        });\r\n      } else {\r\n        // Otherwise, it's a primitive value, so print it\r\n        console.log(`${key}: ${obj[key]}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    recur(data);\r\n  }, [data]);\r\n\r\n  return (\r\n    <div className=\"code-block\">\r\n      <pre>Hello world</pre>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,OAAOA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAMC,KAAK,GAAIF,IAAI,IAAK;IACtB,KAAK,IAAIG,GAAG,IAAIH,IAAI,EAAE;MACpB,IAAI,OAAOA,IAAI,CAACG,GAAG,CAAC,KAAK,QAAQ,EAAE;QACjC;QACAC,WAAW,CAACJ,IAAI,CAACG,GAAG,CAAC,CAAC;MACxB,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC,CAAC,EAAE;QAClC;QACAK,OAAO,CAACC,GAAG,CAAE,GAAEN,GAAI,GAAE,CAAC;QACtBH,IAAI,CAACG,GAAG,CAAC,CAACO,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UACjCJ,OAAO,CAACC,GAAG,CAAE,KAAIG,KAAM,KAAID,IAAK,EAAC,CAAC;QACpC,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACAH,OAAO,CAACC,GAAG,CAAE,GAAEN,GAAI,KAAII,GAAG,CAACJ,GAAG,CAAE,EAAC,CAAC;MACpC;IACF;EACF,CAAC;EAEDU,SAAS,CAAC,MAAM;IACdX,KAAK,CAACF,IAAI,CAAC;EACb,CAAC,EAAE,CAACA,IAAI,CAAC,CAAC;EAEV,oBACEF,OAAA;IAAKgB,SAAS,EAAC,YAAY;IAAAC,QAAA,eACzBjB,OAAA;MAAAiB,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEV;AAAClB,EAAA,CA5BuBF,OAAO;AAAAqB,EAAA,GAAPrB,OAAO;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}